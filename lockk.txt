library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;

entity codelock is
 port( clk: in std_logic;
 reset : in std_logic;
 segs : out std_logic_vector (6 downto 0);
 aon : out std_logic_vector(3 downto 0);
 x1:in STD_LOGIC;
           x2:in STD_LOGIC;
           x3:in STD_LOGIC;
           x4:in STD_LOGIC;
           x5:in STD_LOGIC;
           x6:in STD_LOGIC;
           x7:in STD_LOGIC;
           x8:in STD_LOGIC;
           x9:in STD_LOGIC;
           xa:in STD_LOGIC;
           xb:in STD_LOGIC;
           xc:in STD_LOGIC;
           xd:in STD_LOGIC;
           xe:in STD_LOGIC;
           xf:in STD_LOGIC;
           xg:in STD_LOGIC;
 
--  sw2: in std_logic_vector(3 downto 0 );
--   sw3: in std_logic_vector(3 downto 0);
--    sw4: in std_logic_vector(3 downto 0);
 pass :out std_logic;
  fail :out std_logic;
  btn : in std_logic_vector (3 to 0);---- mistaske : should be in 

 btnc : in std_logic);

--led ka input will go to temp
--btn is high clk is rising edge 
--then temp will be in temp2 


 
-- UNLOCK: out std_logic );
end codelock;
architecture behavior of codelock is
type l_state is (locked,unlocked,ch1,ch2,ch3,deact);
signal c_state,n_state : l_state;
signal counter: STD_LOGIC_VECTOR (23 downto 0):= "000000000000000000000000";
signal sig: std_logic_vector(1 downto 0);
signal sel: STD_LOGIC_VECTOR(3 downto 0);
signal temp1 : std_logic_vector(3 downto 0);
signal temp2: std_logic_vector(3 downto 0);
signal temp3 : std_logic_vector(3 downto 0);
signal temp4 : std_logic_vector(2 downto 0);

begin
temp1(0)<=x1;
temp1(1)<=x2;
temp1(2)<=x3;
temp1(3)<=x4;
temp2(0)<=x5;
temp2(1)<=x6;
temp2(2)<=x7;
temp2(3)<=x8;
temp3(0)<=x9;
temp3(1)<=xa;
temp3(2)<=xb;
temp3(3)<=xc;
temp4(0)<=xd;
temp4(1)<=xe;
temp4(2)<=xf;
--temp4(3)<=xg;

process (clk,reset)
 begin
   if(reset='1') then
  if counter = "000000000000000000000000" then
    c_state <= locked;

        counter <= (others => '0');
                    
        
    elsif (rising_edge(clk)) then
         counter <= counter + 1;
            c_state <= n_state;
            
           if (counter = "11111111111111111111111") then
           
           counter <= "000000000000000000000000";
           

           end if;
--         segs <= temp;
        end if;
    end if;
end process;
sig <= counter(18 downto 17);
----- change of stages with clock
process(c_state,temp1,temp2,temp3,temp4)
begin
 case c_state is
 when locked => if (temp1 = "1111") then 
                       
                           n_state <= ch1;
                 else
                           n_state <= deact;
                 end if;
   when ch1 => if temp2 = "1111" then
                        
                            n_state <= ch2;
               else 
                            n_state <= deact;
                 end if;
  when ch2 => if temp3 = "1111" then
                        
                            n_state <= ch3;
                else
                            n_state<= deact;
                end if;            
  when ch3 => if temp4 = "111" then 
                        
                            n_state <= unlocked;
                 else
                            n_state <= deact;
                 end if;
  when unlocked => if btnc = '1' then 
                            n_state <= locked;
                            end if;                            
--  when locked => if (sw1 /= "1111" and sw2 /= "1111" and sw3 /= "1111" and sw4 /= "1111") then 
--                        n_state<= deact;
--                        end if;
  when others => n_state <= locked;          
        
   end case;
   end process;                                    
uu2 : process (c_state,sig)
begin
 case c_state is      
                  when unlocked =>
                pass <= '1';
                case sig is 
                     when   "00" =>
                sel <= "0000";---------0
                when  "01" =>
                sel <= "0001";-----------1
                when "10" =>
                sel <= "0010";----------2
                when "11" =>
                sel <= "0011";----------2
               end case;
                
  when ch1 =>
                case sig is 
                when "00" => sel <= "0011";
                when "01" => sel <= "0100";
                when "10" => sel <= "0001";
                when "11" => sel <= "0101";
                end case;
--                if sig= "00" then
--                sel <= "0010";---------0
--                if sig= "01" then
--                sel <= "0011";-----------1
--                if sig= "10" then
--                sel <= "0100";----------2
--                if sig= "11" then
--                sel <= "0101";----------2
 when ch2 =>
                case sig is 
                when "00" => sel <= "0011";
                when "01" => sel <= "0100";
                when "10" => sel <= "0001";
                when "11" => sel <= "0101";
                end case;
 when ch3 =>
                case sig is 
                when "00" => sel <= "0011";
                when "01" => sel <= "0100";
                when "10" => sel <= "0001";
                when "11" => sel <= "0101";
                end case;
                    
  when deact => 
                case sig is
                when "00" =>
                sel <= "0110";---------0
                when "01" =>
                sel <= "0111";-----------1
                when "10" =>
                sel <= "1000";----------2
                when "11" =>
                sel <= "0011";
                              
                end case;
 when locked =>
                case sig is 
                when "00" => sel <= "0010";
                when "01" => sel <= "1001";
                when "10" => sel <= "0011";
                when "11"=> sel <= "0000";
                end case;   
  when others => 
                case sig is
                when "00" =>
                sel <= "0110";---------0
                when "01" =>
                sel <= "0111";-----------1
                when "10" =>
                sel <= "1000";----------2
                when "11" =>
                sel <= "0011";                       
                
       end case;
       end case;
         end process;    
         
process (sel)
begin
case sel is 
when "0000" => segs <= "1000001";---- 0,    U

when "0001" => segs <= "1101010";-------1,   n
when "0010" => segs <= "1110001"; -- 2,      L
  when "0011" => segs <= "0110001"; -- 3 ,   C
  when  "0100" => segs <= "1101000"; -- 4 ,  h
  when "0101" => segs <= "0100000"; -- 5     G
  when "0110" => segs <= "1000010";-----6,   d
  when "0111" => segs <= "0110000";------7   E
  when "1000" => segs <= "0001000";------8   a
  when "1001" => segs <= "0000001";-----9    O
--    if sel = "0000" then segs <= "1000111";-- "0"     
--    if sel=  "0001" then segs <= "1000000"; -- "1" 
--    if sel= "0010" then segs <= "1000110"; -- "2" 
--    if sel= "0011" then segs <= "1000001"; -- "3" 
--    if sel=  "0100" then segs <= "1101010"; -- "4" 
--    if sel = "0101" then segs <= "1000111"; -- "5" 
--    if sel = "0110" then segs <= "1000110"; -- "6" 
--    end if;
--  end if;
-- end if;
--  end if;
-- end if;
-- end if;
-- end if;
when others => segs <= "0000000";
end case;
 end process;
 process(sig)
begin
case sig is
    when "00" =>
        aon<= "1110";
        
    when "01" =>
        aon<= "1101";
       
     when "10" =>
       aon<= "1011"; 
       
      when "11" =>
       aon<= "0111"; 
     
      end case;
 end process;                             
              

end behavior;

--set_property PACKAGE_PIN R2 [get_ports reset]     
--        set_property IOSTANDARD LVCMOS33 [get_ports reset]